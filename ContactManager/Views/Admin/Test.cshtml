@model ContactManager.Models.Test

@{
    ViewBag.Title = "Test";
    int id = Model == null ? 0 : Model.ID;
    string questions = "[]";
    if (Model != null && Model.Questions != null && Model.Questions.Count() != 0)
    {
        questions = Newtonsoft.Json.JsonConvert.SerializeObject(Model.Questions);
    }
}
<h2>Test</h2>
<ol class="breadcrumb">
    <li><a href="@Url.Action("Index")">Admin</a></li>
    <li><a href="@Url.Action("Tests")">Tests</a></li>
    <li class="active">Edit Test</li>
</ol>

@using (Html.BeginForm("Test", "Admin", FormMethod.Post, new { id = "testForm" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" name="Questions" id="questions" value="[]" />
    
    <div class="form-horizontal">
        @Html.ValidationSummary(true)
        <input type="hidden" name="ID" value="@id" />

        <div class="form-group">
            @Html.LabelFor(model => model.Title, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Title)
                @Html.ValidationMessageFor(model => model.Title)
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Career, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CareerID", ViewBag.Careers as IEnumerable<SelectListItem>, new { id = "careerid", style="width: 300px", @class="chosen", data_placeholder = "Select career" })
            </div>
        </div>
        <div class="form-group">
            <div>
                <label class="control-label col-md-2">Questions</label>
                <div class="col-md-10 questions">
                    @if (Model != null && Model.Questions.Count != 0)
                    {
                        foreach (var question in Model.Questions)
                        {
                            <div class="question" style="padding:10px; cursor:default; width:750px; text-align:left">
                                <input type="hidden" value="@question.ID" />
                                <div class="move-question" style="display:inline; cursor:move">
                                    <span class="glyphicon glyphicon-option-vertical"></span>
                                </div>
                                <div style="display:inline">
                                    <label style="min-width:600px">@Html.Raw(question.Text)</label>
                                </div>
                                <div class="btn-group">
                                    <div title="Edit question" class="btn btn-default edit-question">
                                        <span class="glyphicon glyphicon-pencil"></span>
                                    </div>
                                    <div title="Delete qiestion" class="btn btn-default delete-question">
                                        <span class="glyphicon glyphicon-remove"></span>
                                    </div>
                                </div>
                            </div>
                        }
                    }

                </div>
            </div>
            <div>
                <div class="col-md-2"></div>
                <div class="col-md-10">
                    <select id="additem" data-placeholder="Add question" class="chosen">
                        <option></option>
                        <option value="text">Text with gaps</option>
                        <option value="radio">Multiple choice</option>
                        <option value="checkbox">Checkboxes</option>
                    </select>
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<div class="option base-option-checkbox" style="display:none">
    <div class="move-option" style="display:inline; cursor:move">
        <span class="glyphicon glyphicon-option-vertical"></span>
    </div>
    <div style="display:inline">
        <input type="text" style="min-width:300px" />
    </div>
    <div style="display:inline">
        <input name="isright" type="checkbox" /><span>Is right</span>
    </div>
    <div title="Delete option" class="btn btn-default delete-option">
        <span class="glyphicon glyphicon-remove"></span>
    </div>
</div>

<div class="option base-option-radio" style="display:none">
    <div class="move-option" style="display:inline; cursor:move">
        <span class="glyphicon glyphicon-option-vertical"></span>
    </div>
    <div style="display:inline">
        <input type="text" style="min-width:300px" />
    </div>
    <div style="display:inline">
        <input name="isright" type="radio" /><span>Is right</span>
    </div>
    <div title="Delete option" class="btn btn-default delete-option">
        <span class="glyphicon glyphicon-remove"></span>
    </div>
</div>

<div class="question base-question" style="padding:10px; cursor:default; width:750px; text-align:left; display:none">
    <input type="hidden" />
    <div class="move-question" style="display:inline; cursor:move">
        <span class="glyphicon glyphicon-option-vertical"></span>
    </div>
    <div style="display:inline">
        <label style="min-width:600px"></label>
    </div>
    <div class="btn-group">
        <div title="Edit question" class="btn btn-default edit-question">
            <span class="glyphicon glyphicon-pencil"></span>
        </div>
        <div title="Delete qiestion" class="btn btn-default delete-question">
            <span class="glyphicon glyphicon-remove"></span>
        </div>
    </div>
</div>

<div id="modalTextQuestion" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modalTextQuestionLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="modalTextQuestionLabel">Text with gaps</h4>
            </div>
            <div class="form-horizontal" style="margin:10px">
                <div class="form-group">
                    <form id="textQuestionForm">
                        <input id="type" type="hidden" value="text" />
                        <input id="ID" type="hidden" />
                        <div class="form-group">
                            <label class="control-label col-md-3">Question Title</label>
                            <div class="col-md-8">
                                <input id="Text" class="input-field" type="text" required data-val="true" data-val-required="The Question Title is requeired." name="Text" />
                                <span class="field-validation-valid" data-valmsg-for="Text" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Help Text</label>
                            <div class="col-md-8">
                                <input id="HelpText" class="input-field" data-val="true" type="text" name="HelpText" />
                                <span class="field-validation-valid" data-valmsg-for="HelpText" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Text</label>
                            <div class="col-md-8">
                                <textarea id="options"></textarea>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="SaveQuestion($('#modalTextQuestion'))">Save</button>
            </div>
        </div>
    </div>
</div>

<div id="modalMultipleChoiceQuestion" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modalMultipleChoiceQuestionLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="modalMultipleChoiceQuestionLabel">Multiple choice</h4>
            </div>
            <div class="form-horizontal" style="margin:10px">
                <div class="form-group">
                    <form id="multipleChoiceQuestionForm">
                        <input id="type" type="hidden" value="radio" />
                        <input id="ID" type="hidden" />
                        <div class="form-group">
                            <label class="control-label col-md-3">Question Title</label>
                            <div class="col-md-8">
                                <input id="Text" class="input-field" type="text" required data-val="true" data-val-required="The Question Title is requeired." name="Text" />
                                <span class="field-validation-valid" data-valmsg-for="Text" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Help Text</label>
                            <div class="col-md-8">
                                <input id="HelpText" class="input-field" data-val="true" type="text" name="HelpText" />
                                <span class="field-validation-valid" data-valmsg-for="HelpText" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Options</label>
                            <div class="col-md-8">
                                <div class="options">
                                    <button type="button" class="btn btn-primary add-option">Add option</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="SaveQuestion($('#modalMultipleChoiceQuestion'))">Save</button>
            </div>
        </div>
    </div>
</div>

<div id="modalCheckboxesQuestion" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="modalCheckboxesQuestionLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                <h4 class="modal-title" id="modalMultipleChoiceQuestionLabel">Multiple choice</h4>
            </div>
            <div class="form-horizontal" style="margin:10px">
                <div class="form-group">
                    <form id="checkboxesQuestionForm">
                        <input id="type" type="hidden" value="checkbox" />
                        <input id="ID" type="hidden" />
                        <div class="form-group">
                            <label class="control-label col-md-3">Question Title</label>
                            <div class="col-md-8">
                                <input id="Text" class="input-field" required type="text" data-val="true" data-val-required="The Question Title is requeired." name="Text" />
                                <span class="field-validation-valid" data-valmsg-for="Text" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Help Text</label>
                            <div class="col-md-8">
                                <input id="HelpText" class="input-field" data-val="true" type="text" name="HelpText" />
                                <span class="field-validation-valid" data-valmsg-for="HelpText" data-valmsg-replace="true"></span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="control-label col-md-3">Options</label>
                            <div class="col-md-8">
                                <div class="options">
                                    <button type="button" class="btn btn-primary add-option">Add option</button>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="SaveQuestion($('#modalCheckboxesQuestion'))">Save</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval", "~/bundles/chosen", "~/bundles/ckeditor")
    <script>
        var currentType;
        var currentQuestion;
        var questions = [];
        $(document).ready(function () {
            var q = '@Html.Raw(questions)';
            q = escapeSpecialChars(q);
            questions = JSON.parse(q);

            $(".chosen").chosen({ allow_single_deselect: true, width: "500px" });
            $("#additem").change(function () {
                selectedQuestion = 0;
                var type = $(this).val();
                switch (type) {
                    case "text":
                        $("#modalTextQuestion").modal("show");
                        break;
                    case "radio":
                        $("#modalMultipleChoiceQuestion").modal("show");
                        break;
                    case "checkbox":
                        $("#modalCheckboxesQuestion").modal("show");
                        break;
                }
                $("#additem").val("").trigger("chosen:updated");
            }).chosen({ width: "250px", allow_single_deselect: true });
            $('.chosen-search').hide();

            $("#testForm").submit(function () {
                $("#questions").val(JSON.stringify(questions));
            });

            CKEDITOR.replace("options", {
                extraPlugins: "gapscreator",
                removePlugins: "filebrowser,a11yhelp,bidi,blockquote,panelbutton,colorbutton,colordialog,templates,link,smiley,print,div",
            });

            $(".add-option").click(function () {
                if (currentType) {
                    var opt;
                    switch (currentType) {
                        case "radio":
                            opt = $(".base-option-radio").clone(true, true).removeClass("base-option-radio").show();
                            break;
                        case "checkbox":
                            opt = $(".base-option-checkbox").clone(true, true).removeClass("base-option-checkbox").show();
                            break;
                    }
                }
                if (opt)
                    $(this).before(opt);
            });

            $(".delete-option").click(function () {
                if ($(".option:not(.base-option-radio):not(.base-option-checkbox)")
                    && $(".option:not(.base-option-radio):not(.base-option-checkbox)").length > 1)
                    $(this).parent().remove();
            });

            $(".edit-question").click(function () {
                EditQuestion($(this).parent().parent().find("input[type=hidden]").val());
            });

            $(".delete-question").click(function () {
                DeleteQuestion($(this).parent().parent().find("input[type=hidden]").val());
                $(this).parent().parent().remove();
            });
        });

        function escapeSpecialChars(jsonString) {

            return jsonString.replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/\t/g, "\\t")
                .replace(/\f/g, "\\f");

        }

        function SaveQuestion(modal) {
            var form = modal.find("form");
            if (!form.valid())
                return;
            var type = modal.find("#type").val();
            var ID = modal.find("#ID").val();
            if (!ID)
                ID = GetQuestionID();
            var text = modal.find("#Text").val();
            var helpText = modal.find("#HelpText").val();
            var question = {ID: ID, Text: text, HelpText: helpText, Type: type};
            switch (type) {
                case "text":
                    var textWithGaps = CKEDITOR.instances.options.getData();
                    question.Options = [{ Text: textWithGaps, IsRight: true }];
                    break;
                case "radio":
                    question.Options = [];
                    modal.find(".option").each(function (index) {
                        var text = $(this).find("input[type=text]").val();
                        var isRight = $(this).find("input[type=radio]").prop("checked");
                        var option = { Text: text, IsRight: isRight };
                        if (text)
                            question.Options.push(option);
                    });
                    break;
                case "checkbox":
                    question.Options = [];
                    modal.find(".option").each(function (index) {
                        var text = $(this).find("input[type=text]").val();
                        var isRight = $(this).find("input[type=checkbox]").prop("checked");
                        var option = { Text: text, IsRight: isRight };
                        if (text)
                            question.Options.push(option);
                    });
                    break;
            }
            SaveQuestionInVar(question);
            if (currentQuestion != ID) {
                var questionDiv = $(".base-question").clone(true, true).removeClass("base-question").show();
                questionDiv.find("input[type=hidden]").val(question.ID);
                questionDiv.find("label").append(question.Text);
                $(".questions").append(questionDiv);
            }
            else {
                $(".question").each(function (index, element) {
                    if ($(element).find("input[type=hidden]").val() == currentQuestion) {
                        $(element).find("label").text(question.Text);
                    }
                });
            }
            modal.modal("hide");
        }

        function SaveQuestionInVar(question) {
            var index;
            if (questions) {
                for (var i = 0; i < questions.length; i++) {
                    var q = questions[i];
                    if (q && q.ID && q.ID == question.ID)
                        index = i;
                }
            }
            if (index >= 0) {
                questions.splice(index, 1);
                questions[i] = question;
            }
            else {
                questions[questions.length] = question;
            }
        }

        function EditQuestion(id) {
            currentQuestion = id;
            var question = GetQuestion(id);
            if (question) {
                switch (question.Type) {
                    case "text":
                    case 1:
                        $("#modalTextQuestion").modal("show");
                        break;
                    case "radio":
                    case 3:
                        $("#modalMultipleChoiceQuestion").modal("show");
                        break;
                    case "checkbox":
                    case 2:
                        $("#modalCheckboxesQuestion").modal("show");
                        break;
                }
            }
        }

        function DeleteQuestion(id) {
            if (questions && questions.length != 0) {
                for (var i = 0; i < questions.length; i++) {
                    var question = questions[i];
                    if (question && question.ID && question.ID == id) {
                        questions.splice(i, 1);
                        break;
                    }
                }
            }
        }

        function GetQuestion(id) {
            if (questions && questions.length != 0) {
                for (var i = 0; i < questions.length; i++) {
                    var question = questions[i];
                    if (question && question.ID && question.ID == id) {
                        return question;
                    }
                }
            }
            return null;
        }

        function GetQuestionID() {
            var maxID = 1;
            if (questions) {
                for (var i = 0; i < questions.length; i++) {
                    var question = questions[i];
                    if (question && question.ID) {
                        if (question.ID >= maxID)
                            maxID = question.ID + 1;
                    }
                }
            }
            return maxID;
        }

        $(".modal").on("show.bs.modal", function (e) {
            var modal = $(this);
            var type = modal.find("#type").val();
            currentType = type;
            var optionsDiv = modal.find(".options");
            if (currentQuestion && optionsDiv && type) {
                var question = GetQuestion(currentQuestion);
                if (question) {
                    modal.find("#ID").val(question.ID);
                    modal.find("#Text").val(question.Text);
                    modal.find("#HelpText").val(question.HelpText);
                    switch (type) {
                        case "text":
                            if(question.Options && question.Options[0])
                                CKEDITOR.instances.options.editable().setHtml(question.Options[0].Text);
                            break;
                        case "radio":
                            if (question.Options && question.Options.length != 0) {
                                var opts = [];
                                for (var i = 0; i < question.Options.length; i++) {
                                    var option = question.Options[i];
                                    var opt;
                                    opt = $(".base-option-radio").clone(true, true).removeClass("base-option-radio").show();
                                    opt.find("input[type=radio]").prop('checked', option.IsRight);
                                    opt.find("input[type=text]").val(option.Text);
                                    opts.push(opt);
                                }
                                if (opts && opts.length != 0) {
                                    optionsDiv.prepend(opts);
                                }
                            }
                            else {
                                var opt;
                                opt = $(".base-option-radio").clone(true, true).removeClass("base-option-radio").show();
                                opt.find("input[type=radio]").prop('checked', true);
                                if (opt)
                                    optionsDiv.prepend(opt);
                            }
                            break;
                        case "checkbox":
                            if (question.Options && question.Options.length != 0) {
                                var opts = [];
                                for (var i = 0; i < question.Options.length; i++) {
                                    var option = question.Options[i];
                                    var opt;
                                    opt = $(".base-option-checkbox").clone(true, true).removeClass("base-option-checkbox").show();
                                    opt.find("input[type=checkbox]").prop('checked', option.IsRight);
                                    opt.find("input[type=text]").val(option.Text);
                                    opts.push(opt);
                                }
                                if (opts && opts.length != 0) {
                                    optionsDiv.prepend(opts);
                                }
                            }
                            else {
                                var opt;
                                opt = $(".base-option-checkbox").clone(true, true).removeClass("base-option-checkbox").show();
                                if (opt)
                                    optionsDiv.prepend(opt);
                            }
                            break;
                    }
                }
            }
            else if (optionsDiv && type) {
                var opt;
                switch (type) {
                    case "radio":
                        opt = $(".base-option-radio").clone(true, true).removeClass("base-option-radio").show();
                        opt.find("input[type=radio]").prop('checked', true);
                        break;
                    case "checkbox":
                        opt = $(".base-option-checkbox").clone(true, true).removeClass("base-option-checkbox").show();
                        break;
                }
                if (opt)
                    optionsDiv.prepend(opt);
            }
        });

        $(".modal").on("hidden.bs.modal", function (e) {
            currentType = "";
            currentQuestion = "";
            CKEDITOR.instances.options.setData("");
            var modal = $(this);
            modal.find("#Text").val("");
            modal.find("#HelpText").val("");
            modal.find(".option").remove();
        });

        $.fn.serializeObject = function () {
            var o = {};
            var a = this.serializeArray();
            $.each(a, function () {
                if (o[this.name] !== undefined) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || '');
                } else {
                    o[this.name] = this.value || '';
                }
            });
            return o;
        };

        $.fn.modal.Constructor.prototype.enforceFocus = function () {
            modal_this = this
            $(document).on('focusin.modal', function (e) {
                if (modal_this.$element[0] !== e.target && !modal_this.$element.has(e.target).length
                && !$(e.target.parentNode).hasClass("cke_dialog_ui_input_select")
                && !$(e.target.parentNode).hasClass("cke_dialog_ui_input_text")) {
                    modal_this.$element.focus()
                }
            })
        };
    </script>
}
